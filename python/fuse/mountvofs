#!/Users/mjg/anaconda/bin/python
"""A FUSE-based filesystem view of VOSpace.
   Based on the CADC version.
"""

import sys
from sys import platform
import os
import logging

import myvos as vos
import myfuse
from myfuse import FUSE
from __version__ import version
from myvofs import VOFS
from mycommonparser import CommonParser
DAEMON_TIMEOUT = 60
 

if __name__ == "__main__":

    parser = CommonParser(description='mount vospace as a filesystem.')

    # mountvofs specific options
    parser.add_option("--vospace", help="the VOSpace to mount", default="vos:")
    parser.add_option("--mountpoint",
                      help="the mountpoint on the local filesystem",
                      default="/tmp/vospace")
    parser.add_option("-f", "--foreground", action="store_true",
                      help="Mount the filesystem as a foreground opperation and " +
                           "produce copious amounts of debuging information")
    parser.add_option("--log", action="store",
                      help="File to store debug log to", default="/tmp/vos.err")
    parser.add_option("--cache_limit", action="store", type=int,
                      help="upper limit on local diskspace to use for file caching (in MBytes)",
                      default=50 * 2 ** (10 + 10 + 10))
    parser.add_option("--cache_dir", action="store",
                      help="local directory to use for file caching", default=None)
    parser.add_option("--readonly", action="store_true",
                      help="mount vofs readonly", default=False)
    parser.add_option("--cache_nodes", action="store_true", default=False,
                      help="cache dataNode properties, containerNodes are not cached")
    parser.add_option("--allow_other", action="store_true", default=False,
                      help="Allow all users access to this mountpoint")
    parser.add_option("--max_flush_threads", action="store", type=int,
                      help="upper limit on number of flush (upload) threads",
                      default=10)
    parser.add_option("--secure_get", action="store_true", default=False,
                      help="Ensure HTTPS instead of HTTP is used to retrieve data (slower)")

    (opt, args) = parser.parse_args()
    print opt
    parser.process_informational_options()
    readonly = False

    log_format = ("%(asctime)s %(thread)d vos-"+str(version)+"%(module)s.%(funcName)s.%(lineno)d %(message)s")

    logging.basicConfig(level=parser.log_level,format=log_format,
                        filename=os.path.abspath(opt.log))

    logger = logging.getLogger()
    logger.setLevel(parser.log_level)
    logger.addHandler(logging.StreamHandler())

    conn = vos.Connection()
    
    root = opt.vospace
    mount = os.path.abspath(opt.mountpoint)
    if opt.cache_dir is None:
        opt.cache_dir = os.path.normpath(os.path.join(
            os.getenv('HOME', '.'), root.replace(":", "_")))
    if not os.access(mount, os.F_OK):
        os.makedirs(mount)
    if platform == "darwin":
        fuse = FUSE(VOFS(root, opt.cache_dir, opt, conn=conn,
                         cache_limit=opt.cache_limit, cache_nodes=opt.cache_nodes,
                         cache_max_flush_threads=opt.max_flush_threads,
                         secure_get=opt.secure_get),
                    mount,
                    fsname=root,
                    volname=root,
                    defer_permissions=True,
                    daemon_timeout=DAEMON_TIMEOUT,
                    readonly=readonly,
                    # auto_cache=True,
                    allow_other=opt.allow_other,
                    noapplexattr=True,
                    noappledouble=True,
                    foreground=opt.foreground)
    else:
        fuse = FUSE(VOFS(root, opt.cache_dir, opt, conn=conn,
                         cache_limit=opt.cache_limit, cache_nodes=opt.cache_nodes,
                         cache_max_flush_threads=opt.max_flush_threads,
                         secure_get=opt.secure_get),
                    mount,
                    fsname=root,
                    readonly=readonly,
                    allow_other=opt.allow_other,
                    # auto_cache=True,
                    foreground=opt.foreground)
